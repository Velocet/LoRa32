; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

;
;   LoRa32 PlatformIO Configuration
;
; CTRL+SHIFT+P > PlatformIO: New Terminal
;
; Show Computed Configuration
;   > pio project config
;   https://docs.platformio.org/en/latest/core/userguide/project/cmd_config.html
;
; Fix clang errors:
;   - Generate a compile_commands.json
;     > pio run --target compiledb
;     https://docs.platformio.org/en/latest/integration/compile_commands.html
;   - Download clang: https://releases.llvm.org/download.html
;   - Set the clang-tidy/format paths in VSCode settings (or use supplied settings.json)
;   - https://github.com/platformio/platformio-core/issues/4684
;   - https://github.com/microsoft/vscode-cpptools/issues/9898
;

[platformio]
name = LoRa32
description = Automatic board configuration for LoRa32 and ESP32 with RadioLib compatible modules
default_envs = heltec_wifi_lora_32_V2

; Global data for all [env:***]
[env]
framework = arduino
platform = espressif32
platform_packages = framework-arduinoespressif32
; platform_packages = https://github.com/espressif/arduino-esp32.git#idf-release/v5.1 ; Latest version does not work. Thanks for nothing PlatformIO^^
board_build.filesystem = littlefs
;   Build Settings
build_unflags = -std=gnu++11 -Os
build_flags = -std=gnu++2a -O3
  -Ilib -Isrc
  -mtarget-align
  -DCONFIG_COMPILER_OPTIMIZATION_PERF=y
lib_ldf_mode = chain+ ; Fixes include problems (eg.: RadioLib can't find SPI)
lib_deps = https://github.com/jgromes/RadioLib
;   Upload & Monitor Settings
upload_protocol = esptool
upload_speed = 921600
monitor_speed = 115200
monitor_echo = yes
monitor_eol = LF
monitor_filters =
  default                 ; Remove typical terminal control codes from input
  time                    ; Add timestamp with milliseconds for each new line
  colorize                ; Apply different colors for received and echo
  send_on_enter           ; Send a text to device on ENTER
  esp32_exception_decoder ; Crash exception decoder
;   Check Settings
check_skip_packages = yes
check_tool = cppcheck, clangtidy
check_flags =
  cppcheck: --enable=style --std=c++17
  clangtidy: -format-style=Google -fix-errors
; check_severity = high ; high = Bugs || medium = Defensive Programming || low = Cleanup/Performance

; Debug group can be use in [env:***] via ${debug.***}
[debug]
build_type = debug
targets = upload,	monitor          ; Build: Upload & Serial Monitor
debug_build_flags = -O0 -ggdb3 -g3 ; Optimization level and debug info amount
; monitor_filters = ${env.monitor_filters} debug ; Print what is sent and received
; Arduino Debug Level
; -DCORE_DEBUG_LEVEL=0 ; None
; -DCORE_DEBUG_LEVEL=1 ; Error
; -DCORE_DEBUG_LEVEL=2 ; Warn
; -DCORE_DEBUG_LEVEL=3 ; Info
; -DCORE_DEBUG_LEVEL=4 ; Debug
; -DCORE_DEBUG_LEVEL=5 ; Verbose

[env:heltec_wifi_lora_32_V2]
board = heltec_wifi_lora_32_V2
